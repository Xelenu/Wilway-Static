{
  "version": 3,
  "sources": ["../src/uv.sw.js"],
  "sourcesContent": ["/*globals __uv$config*/\r\n// Users must import the config (and bundle) prior to importing uv.sw.js\r\n// This is to allow us to produce a generic bundle with no hard-coded paths.\r\n\r\n/**\r\n * @type {import('../uv').UltravioletCtor}\r\n */\r\nconst Ultraviolet = self.Ultraviolet;\r\n\r\nconst cspHeaders = [\r\n\t\"cross-origin-embedder-policy\",\r\n\t\"cross-origin-opener-policy\",\r\n\t\"cross-origin-resource-policy\",\r\n\t\"content-security-policy\",\r\n\t\"content-security-policy-report-only\",\r\n\t\"expect-ct\",\r\n\t\"feature-policy\",\r\n\t\"origin-isolation\",\r\n\t\"strict-transport-security\",\r\n\t\"upgrade-insecure-requests\",\r\n\t\"x-content-type-options\",\r\n\t\"x-download-options\",\r\n\t\"x-frame-options\",\r\n\t\"x-permitted-cross-domain-policies\",\r\n\t\"x-powered-by\",\r\n\t\"x-xss-protection\",\r\n];\r\nconst emptyMethods = [\"GET\", \"HEAD\"];\r\n\r\nclass UVServiceWorker extends Ultraviolet.EventEmitter {\r\n\tconstructor(config = __uv$config) {\r\n\t\tsuper();\r\n\t\tif (!config.prefix) config.prefix = \"/service/\";\r\n\t\tthis.config = config;\r\n\t\t/**\r\n\t\t * @type {InstanceType<Ultraviolet['BareClient']>}\r\n\t\t */\r\n\t\tthis.bareClient = new Ultraviolet.BareClient();\r\n\t}\r\n\t/**\r\n\t *\r\n\t * @param {Event & {request: Request}} param0\r\n\t * @returns\r\n\t */\r\n\troute({ request }) {\r\n\t\tif (request.url.startsWith(location.origin + this.config.prefix))\r\n\t\t\treturn true;\r\n\t\telse return false;\r\n\t}\r\n\t/**\r\n\t *\r\n\t * @param {Event & {request: Request}} param0\r\n\t * @returns\r\n\t */\r\n\tasync fetch({ request }) {\r\n\t\t/**\r\n\t\t * @type {string|void}\r\n\t\t */\r\n\t\tlet fetchedURL;\r\n\r\n\t\ttry {\r\n\t\t\tif (!request.url.startsWith(location.origin + this.config.prefix))\r\n\t\t\t\treturn await fetch(request);\r\n\r\n\t\t\tconst ultraviolet = new Ultraviolet(this.config);\r\n\r\n\t\t\tif (typeof this.config.construct === \"function\") {\r\n\t\t\t\tthis.config.construct(ultraviolet, \"service\");\r\n\t\t\t}\r\n\r\n\t\t\tconst db = await ultraviolet.cookie.db();\r\n\r\n\t\t\tultraviolet.meta.origin = location.origin;\r\n\t\t\tultraviolet.meta.base = ultraviolet.meta.url = new URL(\r\n\t\t\t\tultraviolet.sourceUrl(request.url)\r\n\t\t\t);\r\n\r\n\t\t\tconst requestCtx = new RequestContext(\r\n\t\t\t\trequest,\r\n\t\t\t\tultraviolet,\r\n\t\t\t\t!emptyMethods.includes(request.method.toUpperCase())\r\n\t\t\t\t\t? await request.blob()\r\n\t\t\t\t\t: null\r\n\t\t\t);\r\n\r\n\t\t\tif (ultraviolet.meta.url.protocol === \"blob:\") {\r\n\t\t\t\trequestCtx.blob = true;\r\n\t\t\t\trequestCtx.base = requestCtx.url = new URL(requestCtx.url.pathname);\r\n\t\t\t}\r\n\r\n\t\t\tif (request.referrer && request.referrer.startsWith(location.origin)) {\r\n\t\t\t\tconst referer = new URL(ultraviolet.sourceUrl(request.referrer));\r\n\r\n\t\t\t\tif (\r\n\t\t\t\t\trequestCtx.headers.origin ||\r\n\t\t\t\t\t(ultraviolet.meta.url.origin !== referer.origin &&\r\n\t\t\t\t\t\trequest.mode === \"cors\")\r\n\t\t\t\t) {\r\n\t\t\t\t\trequestCtx.headers.origin = referer.origin;\r\n\t\t\t\t}\r\n\r\n\t\t\t\trequestCtx.headers.referer = referer.href;\r\n\t\t\t}\r\n\r\n\t\t\tconst cookies = (await ultraviolet.cookie.getCookies(db)) || [];\r\n\t\t\tconst cookieStr = ultraviolet.cookie.serialize(\r\n\t\t\t\tcookies,\r\n\t\t\t\tultraviolet.meta,\r\n\t\t\t\tfalse\r\n\t\t\t);\r\n\r\n\t\t\trequestCtx.headers[\"user-agent\"] = navigator.userAgent;\r\n\r\n\t\t\tif (cookieStr) requestCtx.headers.cookie = cookieStr;\r\n\r\n\t\t\tconst reqEvent = new HookEvent(requestCtx, null, null);\r\n\t\t\tthis.emit(\"request\", reqEvent);\r\n\r\n\t\t\tif (reqEvent.intercepted) return reqEvent.returnValue;\r\n\r\n\t\t\tfetchedURL = requestCtx.blob\r\n\t\t\t\t? \"blob:\" + location.origin + requestCtx.url.pathname\r\n\t\t\t\t: requestCtx.url;\r\n\r\n\t\t\tconst response = await this.bareClient.fetch(fetchedURL, {\r\n\t\t\t\theaders: requestCtx.headers,\r\n\t\t\t\tmethod: requestCtx.method,\r\n\t\t\t\tbody: requestCtx.body,\r\n\t\t\t\tcredentials: requestCtx.credentials,\r\n\t\t\t\tmode: requestCtx.mode,\r\n\t\t\t\tcache: requestCtx.cache,\r\n\t\t\t\tredirect: requestCtx.redirect,\r\n\t\t\t});\r\n\r\n\t\t\tconst responseCtx = new ResponseContext(requestCtx, response);\r\n\t\t\tconst resEvent = new HookEvent(responseCtx, null, null);\r\n\r\n\t\t\tthis.emit(\"beforemod\", resEvent);\r\n\t\t\tif (resEvent.intercepted) return resEvent.returnValue;\r\n\r\n\t\t\tfor (const name of cspHeaders) {\r\n\t\t\t\tif (responseCtx.headers[name]) delete responseCtx.headers[name];\r\n\t\t\t}\r\n\r\n\t\t\tif (responseCtx.headers.location) {\r\n\t\t\t\tresponseCtx.headers.location = ultraviolet.rewriteUrl(\r\n\t\t\t\t\tresponseCtx.headers.location\r\n\t\t\t\t);\r\n\t\t\t}\r\n\r\n\t\t\t// downloads\r\n\t\t\tif ([\"document\", \"iframe\"].includes(request.destination)) {\r\n\t\t\t\tconst header = responseCtx.getHeader(\"content-disposition\");\r\n\r\n\t\t\t\t// validate header and test for filename\r\n\t\t\t\tif (!/\\s*?((inline|attachment);\\s*?)filename=/i.test(header)) {\r\n\t\t\t\t\t// if filename= wasn't specified then maybe the remote specified to download this as an attachment?\r\n\t\t\t\t\t// if it's invalid then we can still possibly test for the attachment/inline type\r\n\t\t\t\t\tconst type = /^\\s*?attachment/i.test(header)\r\n\t\t\t\t\t\t? \"attachment\"\r\n\t\t\t\t\t\t: \"inline\";\r\n\r\n\t\t\t\t\t// set the filename\r\n\t\t\t\t\tconst [filename] = new URL(response.finalURL).pathname\r\n\t\t\t\t\t\t.split(\"/\")\r\n\t\t\t\t\t\t.slice(-1);\r\n\r\n\t\t\t\t\tresponseCtx.headers[\"content-disposition\"] =\r\n\t\t\t\t\t\t`${type}; filename=${JSON.stringify(filename)}`;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (responseCtx.headers[\"set-cookie\"]) {\r\n\t\t\t\tPromise.resolve(\r\n\t\t\t\t\tultraviolet.cookie.setCookies(\r\n\t\t\t\t\t\tresponseCtx.headers[\"set-cookie\"],\r\n\t\t\t\t\t\tdb,\r\n\t\t\t\t\t\tultraviolet.meta\r\n\t\t\t\t\t)\r\n\t\t\t\t).then(() => {\r\n\t\t\t\t\tself.clients.matchAll().then(function (clients) {\r\n\t\t\t\t\t\tclients.forEach(function (client) {\r\n\t\t\t\t\t\t\tclient.postMessage({\r\n\t\t\t\t\t\t\t\tmsg: \"updateCookies\",\r\n\t\t\t\t\t\t\t\turl: ultraviolet.meta.url.href,\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t\t\tdelete responseCtx.headers[\"set-cookie\"];\r\n\t\t\t}\r\n\r\n\t\t\tif (responseCtx.body) {\r\n\t\t\t\tswitch (request.destination) {\r\n\t\t\t\t\tcase \"script\":\r\n\t\t\t\t\t\tresponseCtx.body = ultraviolet.js.rewrite(await response.text());\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"worker\":\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t// craft a JS-safe list of arguments\r\n\t\t\t\t\t\t\tconst scripts = [\r\n\t\t\t\t\t\t\t\tultraviolet.bundleScript,\r\n\t\t\t\t\t\t\t\tultraviolet.clientScript,\r\n\t\t\t\t\t\t\t\tultraviolet.configScript,\r\n\t\t\t\t\t\t\t\tultraviolet.handlerScript,\r\n\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t\t\t.map((script) => JSON.stringify(script))\r\n\t\t\t\t\t\t\t\t.join(\",\");\r\n\t\t\t\t\t\t\tresponseCtx.body = `if (!self.__uv) {\r\n                                ${ultraviolet.createJsInject(\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tultraviolet.cookie.serialize(\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcookies,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tultraviolet.meta,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttrue\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t),\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trequest.referrer\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)}\r\n                            importScripts(${scripts});\r\n                            }\\n`;\r\n\t\t\t\t\t\t\tresponseCtx.body += ultraviolet.js.rewrite(await response.text());\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"style\":\r\n\t\t\t\t\t\tresponseCtx.body = ultraviolet.rewriteCSS(await response.text());\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"iframe\":\r\n\t\t\t\t\tcase \"document\":\r\n\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\tresponseCtx.getHeader(\"content-type\") &&\r\n\t\t\t\t\t\t\tresponseCtx.getHeader(\"content-type\").startsWith(\"text/html\")\r\n\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\tlet modifiedResponse = await response.text();\r\n\t\t\t\t\t\t\tif (Array.isArray(this.config.inject)) {\r\n\t\t\t\t\t\t\t\tconst headPosition = modifiedResponse.indexOf(\"<head>\");\r\n\t\t\t\t\t\t\t\tconst upperHead = modifiedResponse.indexOf(\"<HEAD>\");\r\n\t\t\t\t\t\t\t\tconst bodyPosition = modifiedResponse.indexOf(\"<body>\");\r\n\t\t\t\t\t\t\t\tconst upperBody = modifiedResponse.indexOf(\"<BODY>\");\r\n\t\t\t\t\t\t\t\tconst url = new URL(fetchedURL);\r\n\t\t\t\t\t\t\t\tconst injectArray = this.config.inject;\r\n\t\t\t\t\t\t\t\tfor (const inject of injectArray) {\r\n\t\t\t\t\t\t\t\t\tconst regex = new RegExp(inject.host);\r\n\t\t\t\t\t\t\t\t\tif (regex.test(url.host)) {\r\n\t\t\t\t\t\t\t\t\t\tif (inject.injectTo === \"head\") {\r\n\t\t\t\t\t\t\t\t\t\t\tif (headPosition !== -1 || upperHead !== -1) {\r\n\t\t\t\t\t\t\t\t\t\t\t\tmodifiedResponse =\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tmodifiedResponse.slice(0, headPosition) +\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t`${inject.html}` +\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tmodifiedResponse.slice(headPosition);\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t} else if (inject.injectTo === \"body\") {\r\n\t\t\t\t\t\t\t\t\t\t\tif (bodyPosition !== -1 || upperBody !== -1) {\r\n\t\t\t\t\t\t\t\t\t\t\t\tmodifiedResponse =\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tmodifiedResponse.slice(0, bodyPosition) +\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t`${inject.html}` +\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tmodifiedResponse.slice(bodyPosition);\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tresponseCtx.body = ultraviolet.rewriteHtml(modifiedResponse, {\r\n\t\t\t\t\t\t\t\tdocument: true,\r\n\t\t\t\t\t\t\t\tinjectHead: ultraviolet.createHtmlInject(\r\n\t\t\t\t\t\t\t\t\tultraviolet.handlerScript,\r\n\t\t\t\t\t\t\t\t\tultraviolet.bundleScript,\r\n\t\t\t\t\t\t\t\t\tultraviolet.clientScript,\r\n\t\t\t\t\t\t\t\t\tultraviolet.configScript,\r\n\t\t\t\t\t\t\t\t\tultraviolet.cookie.serialize(cookies, ultraviolet.meta, true),\r\n\t\t\t\t\t\t\t\t\trequest.referrer\r\n\t\t\t\t\t\t\t\t),\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (requestCtx.headers.accept === \"text/event-stream\") {\r\n\t\t\t\tresponseCtx.headers[\"content-type\"] = \"text/event-stream\";\r\n\t\t\t}\r\n\t\t\tif (crossOriginIsolated) {\r\n\t\t\t\tresponseCtx.headers[\"Cross-Origin-Embedder-Policy\"] = \"require-corp\";\r\n\t\t\t}\r\n\r\n\t\t\tthis.emit(\"response\", resEvent);\r\n\t\t\tif (resEvent.intercepted) return resEvent.returnValue;\r\n\r\n\t\t\treturn new Response(responseCtx.body, {\r\n\t\t\t\theaders: responseCtx.headers,\r\n\t\t\t\tstatus: responseCtx.status,\r\n\t\t\t\tstatusText: responseCtx.statusText,\r\n\t\t\t});\r\n\t\t} catch (err) {\r\n\t\t\tif (![\"document\", \"iframe\"].includes(request.destination))\r\n\t\t\t\treturn new Response(undefined, { status: 500 });\r\n\r\n\t\t\tconsole.error(err);\r\n\r\n\t\t\treturn renderError(err, fetchedURL);\r\n\t\t}\r\n\t}\r\n\tstatic Ultraviolet = Ultraviolet;\r\n}\r\n\r\nself.UVServiceWorker = UVServiceWorker;\r\n\r\nclass ResponseContext {\r\n\t/**\r\n\t *\r\n\t * @param {RequestContext} request\r\n\t * @param {import(\"@mercuryworkshop/bare-mux\").BareResponseFetch} response\r\n\t */\r\n\tconstructor(request, response) {\r\n\t\tthis.request = request;\r\n\t\tthis.raw = response;\r\n\t\tthis.ultraviolet = request.ultraviolet;\r\n\t\tthis.headers = {};\r\n\t\t// eg set-cookie\r\n\t\tfor (const key in response.rawHeaders)\r\n\t\t\tthis.headers[key.toLowerCase()] = response.rawHeaders[key];\r\n\t\tthis.status = response.status;\r\n\t\tthis.statusText = response.statusText;\r\n\t\tthis.body = response.body;\r\n\t}\r\n\tget url() {\r\n\t\treturn this.request.url;\r\n\t}\r\n\tget base() {\r\n\t\treturn this.request.base;\r\n\t}\r\n\tset base(val) {\r\n\t\tthis.request.base = val;\r\n\t}\r\n\t//the header value might be an array, so this function is used to\r\n\t//retrieve the value when it needs to be compared against a string\r\n\tgetHeader(key) {\r\n\t\tif (Array.isArray(this.headers[key])) {\r\n\t\t\treturn this.headers[key][0];\r\n\t\t}\r\n\t\treturn this.headers[key];\r\n\t}\r\n}\r\n\r\nclass RequestContext {\r\n\t/**\r\n\t *\r\n\t * @param {Request} request\r\n\t * @param {Ultraviolet} ultraviolet\r\n\t * @param {BodyInit} body\r\n\t */\r\n\tconstructor(request, ultraviolet, body = null) {\r\n\t\tthis.ultraviolet = ultraviolet;\r\n\t\tthis.request = request;\r\n\t\tthis.headers = Object.fromEntries(request.headers.entries());\r\n\t\tthis.method = request.method;\r\n\t\tthis.body = body || null;\r\n\t\tthis.cache = request.cache;\r\n\t\tthis.redirect = request.redirect;\r\n\t\tthis.credentials = \"omit\";\r\n\t\tthis.mode = request.mode === \"cors\" ? request.mode : \"same-origin\";\r\n\t\tthis.blob = false;\r\n\t}\r\n\tget url() {\r\n\t\treturn this.ultraviolet.meta.url;\r\n\t}\r\n\tset url(val) {\r\n\t\tthis.ultraviolet.meta.url = val;\r\n\t}\r\n\tget base() {\r\n\t\treturn this.ultraviolet.meta.base;\r\n\t}\r\n\tset base(val) {\r\n\t\tthis.ultraviolet.meta.base = val;\r\n\t}\r\n}\r\n\r\nclass HookEvent {\r\n\t#intercepted;\r\n\t#returnValue;\r\n\tconstructor(data = {}, target = null, that = null) {\r\n\t\tthis.#intercepted = false;\r\n\t\tthis.#returnValue = null;\r\n\t\tthis.data = data;\r\n\t\tthis.target = target;\r\n\t\tthis.that = that;\r\n\t}\r\n\tget intercepted() {\r\n\t\treturn this.#intercepted;\r\n\t}\r\n\tget returnValue() {\r\n\t\treturn this.#returnValue;\r\n\t}\r\n\trespondWith(input) {\r\n\t\tthis.#returnValue = input;\r\n\t\tthis.#intercepted = true;\r\n\t}\r\n}\r\n\r\n/**\r\n *\r\n * @param {string} trace\r\n * @param {string} fetchedURL\r\n * @returns\r\n */\r\nfunction errorTemplate(trace, fetchedURL) {\r\n\t// turn script into a data URI so we don't have to escape any HTML values\r\n\tconst script = `\r\n        errorTrace.value = ${JSON.stringify(trace)};\r\n        fetchedURL.textContent = ${JSON.stringify(fetchedURL)};\r\n        for (const node of document.querySelectorAll(\"#uvHostname\")) node.textContent = ${JSON.stringify(\r\n\t\t\t\t\tlocation.hostname\r\n\t\t\t\t)};\r\n        reload.addEventListener(\"click\", () => location.reload());\r\n        uvVersion.textContent = ${JSON.stringify(\r\n\t\t\t\t\tprocess.env.ULTRAVIOLET_VERSION\r\n\t\t\t\t)};\r\n        uvBuild.textContent = ${JSON.stringify(\r\n\t\t\t\t\tprocess.env.ULTRAVIOLET_COMMIT_HASH\r\n\t\t\t\t)};\r\n    `;\r\n\r\n\treturn `<!DOCTYPE html>\r\n        <html>\r\n        <head>\r\n        <meta charset='utf-8' />\r\n        <title>Error</title>\r\n        <style>\r\n        * { background-color: white }\r\n        </style>\r\n        </head>\r\n        <body>\r\n        <h1 id='errorTitle'>Error processing your request</h1>\r\n        <hr />\r\n        <p>Failed to load <b id=\"fetchedURL\"></b></p>\r\n        <p id=\"errorMessage\">Internal Server Error</p>\r\n        <textarea id=\"errorTrace\" cols=\"40\" rows=\"10\" readonly></textarea>\r\n        <p>Try:</p>\r\n        <ul>\r\n        <li>Checking your internet connection</li>\r\n        <li>Verifying you entered the correct address</li>\r\n        <li>Clearing the site data</li>\r\n        <li>Contacting <b id=\"uvHostname\"></b>'s administrator</li>\r\n        <li>Verify the server isn't censored</li>\r\n        </ul>\r\n        <p>If you're the administrator of <b id=\"uvHostname\"></b>, try:</p>\r\n        <ul>\r\n        <li>Restarting your server</li>\r\n        <li>Updating Ultraviolet</li>\r\n        <li>Troubleshooting the error on the <a href=\"https://github.com/titaniumnetwork-dev/Ultraviolet\" target=\"_blank\">GitHub repository</a></li>\r\n        </ul>\r\n        <button id=\"reload\">Reload</button>\r\n        <hr />\r\n        <p><i>Ultraviolet v<span id=\"uvVersion\"></span> (build <span id=\"uvBuild\"></span>)</i></p>\r\n        <script src=\"${\r\n\t\t\t\t\t\"data:application/javascript,\" + encodeURIComponent(script)\r\n\t\t\t\t}\"></script>\r\n        </body>\r\n        </html>\r\n        `;\r\n}\r\n\r\n/**\r\n *\r\n * @param {unknown} err\r\n * @param {string} fetchedURL\r\n */\r\nfunction renderError(err, fetchedURL) {\r\n\tlet headers = {\r\n\t\t\"content-type\": \"text/html\",\r\n\t};\r\n\tif (crossOriginIsolated) {\r\n\t\theaders[\"Cross-Origin-Embedder-Policy\"] = \"require-corp\";\r\n\t}\r\n\r\n\treturn new Response(errorTemplate(String(err), fetchedURL), {\r\n\t\tstatus: 500,\r\n\t\theaders: headers,\r\n\t});\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
